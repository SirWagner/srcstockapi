// <auto-generated />
using System;
using BTAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BTAPI.Migrations
{
    [DbContext(typeof(BTContext))]
    [Migration("20230811155134_completemigration")]
    partial class completemigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BTAPI.Models.DocumentToCreate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Anexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaNegocio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmazemOrigem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizacaoOrigem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrDocExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NumDoc")
                        .HasColumnType("bigint");

                    b.Property<string>("Projecto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEntidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipodoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Utilizador")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentToCreate");
                });

            modelBuilder.Entity("BTAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warehouse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BTAPI.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Student__3214EC077FC5CA9B");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("BTAPI.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Base")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purchase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sale")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("BTAPI.Models.UnitItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Conversion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitItem");
                });

            modelBuilder.Entity("BTAPI.Models.UserForLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserForLogin");
                });

            modelBuilder.Entity("BTAPI.Models.UserToCreate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserToCreate");
                });

            modelBuilder.Entity("Stocks.Core.DTOs.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Default")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalStock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Stocks.Core.DTOs.WarehouseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Wharehouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WarehouseItem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.AreaNegocio", b =>
                {
                    b.Property<string>("codigo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short?>("Ano")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("codigo");

                    b.ToTable("AreaNegocio");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Armazem", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Filial")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Morada1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Morada2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Utilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.HasIndex("Filial");

                    b.ToTable("Armazem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Artigo", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("CodBarras")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("IdEstado")
                        .HasColumnType("smallint");

                    b.Property<string>("IdFornecedor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<double>("StkActual")
                        .HasColumnType("float");

                    b.Property<string>("TipoArtigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Codigo");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("TipoArtigo");

                    b.ToTable("Artigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Entity", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Codigo");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Filial", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Morada1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Morada2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("PorDefeito")
                        .HasColumnType("bit");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Utilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("Filial");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Projeto", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("DataConclusaoPrevista")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("EntidadeResponsavel")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("LocalExec")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PrevisaoInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoEntidade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TipoEntidadeResponsavel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TipoProjecto")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Utilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("Projeto");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.TipoArtigo", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.HasKey("Codigo");

                    b.ToTable("TipoArtigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.TipoDocumento", b =>
                {
                    b.Property<string>("Documento")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("AccaoGerada")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Classificacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("DaArtigosEntidade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("FiltraArtigoStock")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("MovimentaStock")
                        .HasColumnType("bit");

                    b.Property<bool>("MovimentaStockEntidade")
                        .HasColumnType("bit");

                    b.Property<string>("NomeAmigavelUtilizador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PermiteAdicaoArtigosNovos")
                        .HasColumnType("bit");

                    b.Property<bool>("TemFiltroTipoArtigo")
                        .HasColumnType("bit");

                    b.Property<bool>("TemSelecaoArtigo")
                        .HasColumnType("bit");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TipoArtigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("ordem")
                        .HasColumnType("int");

                    b.Property<bool>("visivelPaginaInicial")
                        .HasColumnType("bit");

                    b.HasKey("Documento");

                    b.ToTable("TipoDocumentos");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Unidades", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Arredondamento")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.HasKey("Codigo");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.HR.FuncionarioAreaNegocio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AreaNegocio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Director")
                        .HasColumnType("bit");

                    b.Property<string>("Funcionario")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<bool>("Supervisor")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("AreaNegocio");

                    b.HasIndex("Funcionario");

                    b.ToTable("FuncionarioAreaNegocio");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Internal.Documento_WorkFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CriacaoAutomatica")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EstadoDocumentoDestino")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TipoDocumentoDestino")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TipoDocumentoOrigem")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("WorkFlow")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TipoDocumentoOrigem");

                    b.ToTable("Documento_WorkFlow");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Internal.LinhaInternoStatus", b =>
                {
                    b.Property<long>("IdLinhaInterno")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<double>("Quantidade")
                        .HasColumnType("float");

                    b.Property<double>("QuantidadePendente")
                        .HasColumnType("float");

                    b.Property<double>("QuantidadeTransformada")
                        .HasColumnType("float");

                    b.HasKey("IdLinhaInterno");

                    b.ToTable("LinhasInternoStatus");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArmazemLocalizacoes", b =>
                {
                    b.Property<string>("localizacao")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Utilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("activa")
                        .HasColumnType("bit");

                    b.Property<string>("armazem")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("manual")
                        .HasColumnType("bit");

                    b.Property<string>("nomeNivel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("localizacao");

                    b.HasIndex("armazem");

                    b.ToTable("ArmazemLocalizacoes");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoArmazem", b =>
                {
                    b.Property<string>("Artigo")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("Armazem_Defeito")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<float>("StkActual")
                        .HasColumnType("real");

                    b.Property<double>("StkMaximo")
                        .HasColumnType("float");

                    b.Property<double>("StkMinimo")
                        .HasColumnType("float");

                    b.Property<double>("StkReposicao")
                        .HasColumnType("float");

                    b.HasKey("Artigo");

                    b.HasIndex("Armazem_Defeito");

                    b.ToTable("ArtigoArmazem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoEntidade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Armazem")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Artigo")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<short?>("EstadoArtigo")
                        .HasColumnType("smallint");

                    b.Property<string>("Filial")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("Quantidade")
                        .HasColumnType("float");

                    b.Property<string>("TipoEntidade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("id");

                    b.HasIndex("Armazem");

                    b.HasIndex("Artigo");

                    b.HasIndex("Entidade");

                    b.HasIndex("EstadoArtigo");

                    b.HasIndex("Filial");

                    b.ToTable("ArtigoEntidade");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoFornecedor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Armazem")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Artigo")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<bool>("ComFornecedor")
                        .HasMaxLength(30)
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short?>("Estado")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TipoEntidade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("id");

                    b.HasIndex("Armazem");

                    b.HasIndex("Artigo");

                    b.HasIndex("Entidade");

                    b.ToTable("ArtigoFornecedor");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoProjecto", b =>
                {
                    b.Property<string>("Artigo")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("Armazem")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<short>("EstadoArtigo")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Projeto")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Artigo");

                    b.HasIndex("Armazem");

                    b.HasIndex("EstadoArtigo");

                    b.HasIndex("Projeto");

                    b.ToTable("ArtigoProjecto");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoUnidades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Artigo")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Compra")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Venda")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("id");

                    b.HasIndex("Artigo")
                        .IsUnique();

                    b.ToTable("ArtigoUnidades");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.CabecInterno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaNegocio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ArmazemOrigem")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("IdDocumentoOrigem")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdFornecedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("IdMigracao")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("LocalizacaoOrigem")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrDocExterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NumDoc")
                        .HasColumnType("bigint");

                    b.Property<string>("PathAnexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Projecto")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Resumo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TipoEntidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipodoc")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Utilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaNegocio");

                    b.HasIndex("Entidade");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("Tipodoc");

                    b.ToTable("CabecInterno");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.EstadoArtigo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("TipoArtigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("_TipoArtigoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("_TipoArtigoCodigo");

                    b.ToTable("EstadosArtigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.LinhaInterno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AreaNegocio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Armazem")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Artigo")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<Guid>("CabecInternoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EntradaSaida")
                        .HasColumnType("nvarchar(1)");

                    b.Property<double>("FactorConversao")
                        .HasColumnType("float");

                    b.Property<string>("Filial")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<short?>("IdEstado")
                        .HasColumnType("smallint");

                    b.Property<long>("IdMigracao")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Projecto")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("Quantidade")
                        .HasColumnType("float");

                    b.Property<short?>("QuantidadeReparacao")
                        .HasColumnType("smallint");

                    b.Property<short?>("TipoReparacao")
                        .HasColumnType("smallint");

                    b.Property<string>("Unidade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Utilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaNegocio");

                    b.HasIndex("Armazem");

                    b.HasIndex("Artigo");

                    b.HasIndex("CabecInternoId");

                    b.HasIndex("Filial");

                    b.HasIndex("IdEstado");

                    b.HasIndex("Projecto");

                    b.HasIndex("Unidade");

                    b.ToTable("LinhasInterno");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.Linhas_ArtigoArmazem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Armazem")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Artigo")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("ArtigoArmazemArtigo")
                        .HasColumnType("nvarchar(48)");

                    b.Property<double>("StkActual")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Armazem");

                    b.HasIndex("Artigo");

                    b.HasIndex("ArtigoArmazemArtigo");

                    b.ToTable("Linhas_ArtigoArmazem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.Linhas_ArtigoUnidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Artigo")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<double>("FactorConversao")
                        .HasColumnType("float");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Id_ArtigoUnidade")
                        .HasColumnType("int");

                    b.Property<string>("UnidadeDestino")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UnidadeOrigem")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("UtilizaFormula")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Artigo");

                    b.HasIndex("Id_ArtigoUnidade")
                        .IsUnique();

                    b.HasIndex("UnidadeDestino");

                    b.HasIndex("UnidadeOrigem");

                    b.ToTable("Linhas_ArtigoUnidades");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.UnidadesConversao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("FactorConversao")
                        .HasColumnType("real");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UnidadeDestino")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UnidadeOrigem")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("UtilzaFormula")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UnidadesConversao");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaActualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FilialId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Funcionario", b =>
                {
                    b.HasBaseType("Stocks.Domain.BSEntities.Base.Entity");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasDiscriminator().HasValue("Funcionario");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.Fornecedor", b =>
                {
                    b.HasBaseType("Stocks.Domain.BSEntities.Base.Entity");

                    b.HasDiscriminator().HasValue("Fornecedor");
                });

            modelBuilder.Entity("BTAPI.Models.UnitItem", b =>
                {
                    b.HasOne("BTAPI.Models.Unit", "Unit")
                        .WithMany("UnitItems")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Stocks.Core.DTOs.Warehouse", b =>
                {
                    b.HasOne("Stocks.Core.DTOs.WarehouseItem", "Items")
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Armazem", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Filial", "_Filial")
                        .WithMany()
                        .HasForeignKey("Filial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Filial");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Artigo", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Inventory.EstadoArtigo", "Estado")
                        .WithMany()
                        .HasForeignKey("IdEstado");

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.TipoArtigo", "_TipoArtigo")
                        .WithMany()
                        .HasForeignKey("TipoArtigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Fornecedor");

                    b.Navigation("_TipoArtigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.HR.FuncionarioAreaNegocio", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.AreaNegocio", "_AreaNegocio")
                        .WithMany("FuncionarioAreaNegocio")
                        .HasForeignKey("AreaNegocio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Funcionario", "_Funcionario")
                        .WithMany("AreaNegocio")
                        .HasForeignKey("Funcionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_AreaNegocio");

                    b.Navigation("_Funcionario");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Internal.Documento_WorkFlow", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.TipoDocumento", "_TipoDocumentoOrigem")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoOrigem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TipoDocumentoOrigem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Internal.LinhaInternoStatus", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Inventory.LinhaInterno", "LinhaInterno")
                        .WithMany()
                        .HasForeignKey("IdLinhaInterno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinhaInterno");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArmazemLocalizacoes", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "Armazem")
                        .WithMany("ArmazemLocalizacoes")
                        .HasForeignKey("armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armazem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoArmazem", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Armazem_Defeito")
                        .WithMany()
                        .HasForeignKey("Armazem_Defeito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithOne("ArtigoArmazem")
                        .HasForeignKey("Stocks.Domain.BSEntities.Inventory.ArtigoArmazem", "Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Armazem_Defeito");

                    b.Navigation("_Artigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoEntidade", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Armazem")
                        .WithMany()
                        .HasForeignKey("Armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithMany()
                        .HasForeignKey("Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Funcionario", "_Funcionario")
                        .WithMany()
                        .HasForeignKey("Entidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.EstadoArtigo", "_ArtigoEstado")
                        .WithMany()
                        .HasForeignKey("EstadoArtigo");

                    b.HasOne("Stocks.Domain.BSEntities.Base.Filial", "_Filial")
                        .WithMany()
                        .HasForeignKey("Filial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Armazem");

                    b.Navigation("_Artigo");

                    b.Navigation("_ArtigoEstado");

                    b.Navigation("_Filial");

                    b.Navigation("_Funcionario");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoFornecedor", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Armazem")
                        .WithMany()
                        .HasForeignKey("Armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithMany()
                        .HasForeignKey("Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.Fornecedor", "_Fornecedor")
                        .WithMany()
                        .HasForeignKey("Entidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Armazem");

                    b.Navigation("_Artigo");

                    b.Navigation("_Fornecedor");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoProjecto", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Armazem")
                        .WithMany()
                        .HasForeignKey("Armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithMany()
                        .HasForeignKey("Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.EstadoArtigo", "_ArtigoEstado")
                        .WithMany()
                        .HasForeignKey("EstadoArtigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Projeto", "_Projeto")
                        .WithMany()
                        .HasForeignKey("Projeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Armazem");

                    b.Navigation("_Artigo");

                    b.Navigation("_ArtigoEstado");

                    b.Navigation("_Projeto");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoUnidades", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithOne("ArtigoUnidades")
                        .HasForeignKey("Stocks.Domain.BSEntities.Inventory.ArtigoUnidades", "Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Artigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.CabecInterno", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.AreaNegocio", "_AreaNegocio")
                        .WithMany()
                        .HasForeignKey("AreaNegocio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Funcionario", "_Entidade")
                        .WithMany()
                        .HasForeignKey("Entidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.TipoDocumento", "_TipoDoc")
                        .WithMany()
                        .HasForeignKey("Tipodoc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("_AreaNegocio");

                    b.Navigation("_Entidade");

                    b.Navigation("_TipoDoc");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.EstadoArtigo", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.TipoArtigo", "_TipoArtigo")
                        .WithMany("EstadoArtigos")
                        .HasForeignKey("_TipoArtigoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TipoArtigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.LinhaInterno", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.AreaNegocio", "_AreaNegocio")
                        .WithMany()
                        .HasForeignKey("AreaNegocio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Armazem")
                        .WithMany()
                        .HasForeignKey("Armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithMany()
                        .HasForeignKey("Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.CabecInterno", "_CabecInterno")
                        .WithMany("Linhas")
                        .HasForeignKey("CabecInternoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Filial")
                        .WithMany()
                        .HasForeignKey("Filial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.EstadoArtigo", "Estado")
                        .WithMany()
                        .HasForeignKey("IdEstado");

                    b.HasOne("Stocks.Domain.BSEntities.Base.Projeto", "_Projeto")
                        .WithMany()
                        .HasForeignKey("Projecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Unidades", "_Unidade")
                        .WithMany()
                        .HasForeignKey("Unidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("_AreaNegocio");

                    b.Navigation("_Armazem");

                    b.Navigation("_Artigo");

                    b.Navigation("_CabecInterno");

                    b.Navigation("_Filial");

                    b.Navigation("_Projeto");

                    b.Navigation("_Unidade");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.Linhas_ArtigoArmazem", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Armazem", "_Armazem")
                        .WithMany()
                        .HasForeignKey("Armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithMany("Linhas_ArtigoArmazem")
                        .HasForeignKey("Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.ArtigoArmazem", null)
                        .WithMany("Linhas_ArtigoArmazem")
                        .HasForeignKey("ArtigoArmazemArtigo");

                    b.Navigation("_Armazem");

                    b.Navigation("_Artigo");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.Linhas_ArtigoUnidades", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Artigo", "_Artigo")
                        .WithMany("Linhas_ArtigoUnidades")
                        .HasForeignKey("Artigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Inventory.ArtigoUnidades", "ArtigoUnidades")
                        .WithOne("Linhas_ArtigoUnidades")
                        .HasForeignKey("Stocks.Domain.BSEntities.Inventory.Linhas_ArtigoUnidades", "Id_ArtigoUnidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Unidades", "_UnidadeDestino")
                        .WithMany()
                        .HasForeignKey("UnidadeDestino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Base.Unidades", "_UnidadeOrigem")
                        .WithMany()
                        .HasForeignKey("UnidadeOrigem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtigoUnidades");

                    b.Navigation("_Artigo");

                    b.Navigation("_UnidadeDestino");

                    b.Navigation("_UnidadeOrigem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.UserRole", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocks.Domain.BSEntities.Utilizador", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Utilizador", b =>
                {
                    b.HasOne("Stocks.Domain.BSEntities.Base.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("BTAPI.Models.Unit", b =>
                {
                    b.Navigation("UnitItems");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.AreaNegocio", b =>
                {
                    b.Navigation("FuncionarioAreaNegocio");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Armazem", b =>
                {
                    b.Navigation("ArmazemLocalizacoes");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Artigo", b =>
                {
                    b.Navigation("ArtigoArmazem")
                        .IsRequired();

                    b.Navigation("ArtigoUnidades")
                        .IsRequired();

                    b.Navigation("Linhas_ArtigoArmazem");

                    b.Navigation("Linhas_ArtigoUnidades");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.TipoArtigo", b =>
                {
                    b.Navigation("EstadoArtigos");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoArmazem", b =>
                {
                    b.Navigation("Linhas_ArtigoArmazem");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.ArtigoUnidades", b =>
                {
                    b.Navigation("Linhas_ArtigoUnidades")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Inventory.CabecInterno", b =>
                {
                    b.Navigation("Linhas");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Utilizador", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Stocks.Domain.BSEntities.Base.Funcionario", b =>
                {
                    b.Navigation("AreaNegocio");
                });
#pragma warning restore 612, 618
        }
    }
}
